2023-06-02 23:26:03,443 INFO: 
  name: GaussianColorDenoising_KBNet_S
  model_type: ImageCleanModel
  scale: 1
  num_gpu: 1
  manual_seed: 100
  datasets:[
    train:[
      name: TrainSet
      type: Dataset_GaussianDenoising
      sigma_type: random
      sigma_range: [0, 50]
      in_ch: 3
      dataroot_gt: /root/autodl-tmp/SIDD/data/SIDD_patches/train/groundtruth
      dataroot_lq: none
      geometric_augs: True
      filename_tmpl: {}
      io_backend:[
        type: disk
      ]
      use_shuffle: True
      num_worker_per_gpu: 8
      batch_size_per_gpu: 8
      mini_batch_sizes: [8, 5, 4, 2, 1, 1]
      iters: [184000, 128000, 96000, 72000, 72000, 48000]
      gt_size: 384
      gt_sizes: [128, 160, 192, 256, 320, 384]
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 1
    ]
    val:[
      name: ValSet
      type: Dataset_GaussianDenoising
      sigma_test: 15
      in_ch: 3
      dataroot_gt: /root/autodl-tmp/CBSD68-dataset-master/CBSD68/original_png
      dataroot_lq: none
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 1
    ]
  ]
  network_g:[
    type: KBNet_s
    lightweight: True
    ffn_scale: 1.5
  ]
  path:[
    pretrain_network_g: None
    strict_load_g: True
    resume_state: None
    output: /root/autodl-tmp/Restormer_Paddle-main/exp/
    root: /root/autodl-tmp
    experiments_root: /root/autodl-tmp/Restormer_Paddle-main/exp/experiments/GaussianColorDenoising_KBNet_S
    models: /root/autodl-tmp/Restormer_Paddle-main/exp/experiments/GaussianColorDenoising_KBNet_S/models
    training_states: /root/autodl-tmp/Restormer_Paddle-main/exp/experiments/GaussianColorDenoising_KBNet_S/training_states
    log: /root/autodl-tmp/Restormer_Paddle-main/exp/experiments/GaussianColorDenoising_KBNet_S
    visualization: /root/autodl-tmp/Restormer_Paddle-main/exp/experiments/GaussianColorDenoising_KBNet_S/visualization
  ]
  train:[
    total_iter: 500000
    warmup_iter: -1
    use_grad_clip: True
    scheduler:[
      type: CosineAnnealingRestartCyclicLR
      learning_rate: 0.00015
      periods: [184000, 416000]
      restart_weights: [1, 1]
      eta_mins: [0.00015, 1e-06]
    ]
    mixing_augs:[
      mixup: True
      mixup_beta: 1.2
      use_identity: True
    ]
    optim_g:[
      type: AdamW
      weight_decay: 0.0001
      beta1: 0.9
      beta2: 0.999
    ]
    pixel_opt:[
      type: L1Loss
      loss_weight: 1
      reduction: mean
    ]
  ]
  val:[
    window_size: 8
    val_freq: 4000.0
    save_img: False
    rgb2bgr: True
    use_image: False
    max_minibatch: 8
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 0
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: False
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  is_train: True
  dist: False
  rank: 0
  world_size: 1

2023-06-02 23:26:09,754 INFO: Network: KBNet_s, with parameters: 128,403,395
2023-06-02 23:26:09,754 INFO: KBNet_s(
  (intro): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (encoders): LayerList(
    (0): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        )
        (conv1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(64, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(64, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(64, 96, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(48, 64, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        )
        (conv1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(64, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(64, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(64, 96, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(48, 64, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
    (1): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        )
        (conv1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(128, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(128, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(128, 192, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(96, 128, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        )
        (conv1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(128, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(128, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(128, 192, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(96, 128, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
    (2): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        )
        (conv1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(256, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(256, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(256, 384, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        )
        (conv1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(256, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(256, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(256, 384, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (2): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        )
        (conv1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(256, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(256, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(256, 384, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (3): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        )
        (conv1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(256, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(256, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(256, 384, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
    (3): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (2): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (3): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (4): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (5): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (6): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (7): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
  )
  (middle_blks): Sequential(
    (0): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (1): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (2): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (3): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (4): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (5): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (6): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (7): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (8): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (9): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (10): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
    (11): KBBlock_s(
      (norm1): LayerNorm2d()
      (norm2): LayerNorm2d()
      (sca): Sequential(
        (0): AdaptiveAvgPool2D(output_size=1)
        (1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv11): Sequential(
        (0): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
        (1): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      )
      (conv1): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv21): Conv2D(1024, 1024, kernel_size=[3, 3], padding=1, groups=1024, data_format=NCHW)
      (conv2): Sequential(
        (0): Conv2D(1024, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
        (1): SimpleGate()
        (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
      )
      (conv211): Conv2D(1024, 32, kernel_size=[1, 1], data_format=NCHW)
      (conv3): Conv2D(1024, 1024, kernel_size=[1, 1], data_format=NCHW)
      (conv4): Conv2D(1024, 1536, kernel_size=[1, 1], data_format=NCHW)
      (conv5): Conv2D(768, 1024, kernel_size=[1, 1], data_format=NCHW)
      (dropout1): Identity()
      (dropout2): Identity()
      (sg): SimpleGate()
    )
  )
  (decoders): LayerList(
    (0): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        )
        (conv1): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(512, 512, kernel_size=[3, 3], padding=1, groups=512, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(512, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(512, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(512, 512, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(512, 768, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(384, 512, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
    (1): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        )
        (conv1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(256, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(256, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(256, 384, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        )
        (conv1): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(256, 256, kernel_size=[3, 3], padding=1, groups=256, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(256, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(256, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(256, 256, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(256, 384, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(192, 256, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
    (2): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        )
        (conv1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(128, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(128, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(128, 192, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(96, 128, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        )
        (conv1): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(128, 128, kernel_size=[3, 3], padding=1, groups=128, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(128, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(128, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(128, 128, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(128, 192, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(96, 128, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
    (3): Sequential(
      (0): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        )
        (conv1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(64, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(64, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(64, 96, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(48, 64, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
      (1): KBBlock_s(
        (norm1): LayerNorm2d()
        (norm2): LayerNorm2d()
        (sca): Sequential(
          (0): AdaptiveAvgPool2D(output_size=1)
          (1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv11): Sequential(
          (0): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
          (1): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        )
        (conv1): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv21): Conv2D(64, 64, kernel_size=[3, 3], padding=1, groups=64, data_format=NCHW)
        (conv2): Sequential(
          (0): Conv2D(64, 32, kernel_size=[3, 3], padding=1, groups=32, data_format=NCHW)
          (1): SimpleGate()
          (2): Conv2D(16, 32, kernel_size=[1, 1], data_format=NCHW)
        )
        (conv211): Conv2D(64, 32, kernel_size=[1, 1], data_format=NCHW)
        (conv3): Conv2D(64, 64, kernel_size=[1, 1], data_format=NCHW)
        (conv4): Conv2D(64, 96, kernel_size=[1, 1], data_format=NCHW)
        (conv5): Conv2D(48, 64, kernel_size=[1, 1], data_format=NCHW)
        (dropout1): Identity()
        (dropout2): Identity()
        (sg): SimpleGate()
      )
    )
  )
  (ending): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  (ups): LayerList(
    (0): Sequential(
      (0): Conv2D(1024, 2048, kernel_size=[1, 1], data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
    )
    (1): Sequential(
      (0): Conv2D(512, 1024, kernel_size=[1, 1], data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
    )
    (2): Sequential(
      (0): Conv2D(256, 512, kernel_size=[1, 1], data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
    )
    (3): Sequential(
      (0): Conv2D(128, 256, kernel_size=[1, 1], data_format=NCHW)
      (1): PixelShuffle(upscale_factor=2)
    )
  )
  (downs): LayerList(
    (0): Conv2D(64, 128, kernel_size=[2, 2], stride=[2, 2], data_format=NCHW)
    (1): Conv2D(128, 256, kernel_size=[2, 2], stride=[2, 2], data_format=NCHW)
    (2): Conv2D(256, 512, kernel_size=[2, 2], stride=[2, 2], data_format=NCHW)
    (3): Conv2D(512, 1024, kernel_size=[2, 2], stride=[2, 2], data_format=NCHW)
  )
)
2023-06-02 23:26:09,964 INFO: Training statistics:
	Number of train images: 96000
	Dataset enlarge ratio: 1
	Batch size per gpu: 8
	World size (gpu number): 1
	Require iter number per epoch: 12000
	Total epochs: 42; iters: 500000.
2023-06-02 23:26:09,965 INFO: Number of val images/folders in ValSet: 68
2023-06-02 23:26:09,966 INFO: Start training from epoch: 0, iter: 0
2023-06-02 23:26:10,664 INFO: 
 Updating Patch_Size to 128 and Batch_Size to 8 

